{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "6.1.0.0",
    "parameters": {
        "adminUsername": {
            "defaultValue": "azureuser",
            "type": "string",
            "metadata": {
                "description": "User name for the Virtual Machine."
            }
        },
        "authenticationType": {
            "defaultValue": "password",
            "allowedValues": [
                "password",
                "sshPublicKey"
            ],
            "type": "string",
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine, password based authentication or key based authentication."
            }
        },
        "adminPasswordOrKey": {
            "type": "securestring",
            "metadata": {
                "description": "Password or SSH public key to login to the Virtual Machine. Note: There are a number of special characters that you should avoid using for F5 product user accounts.  See [K2873](https://support.f5.com/csp/article/K2873) for details. Note: If using key-based authentication, this should be the public key as a string, typically starting with **---- BEGIN SSH2 PUBLIC KEY ----** and ending with **---- END SSH2 PUBLIC KEY ----**."
            }
        },
        "licenseKey1": {
            "minLength": 1,
            "maxLength": 255,
            "type": "string",
            "metadata": {
                "description": "F5 BIG-IQ CM license key "
            }
        },
        "instanceType": {
            "defaultValue": "Standard_D2s_v3",
            "allowedValues": [
                "Standard_D4s_v3",
                "Standard_D2s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3"
            ],
            "type": "string",
            "metadata": {
                "description": "Instance size of the Virtual Machine."
            }
        },
        "bigIqVersion": {
            "defaultValue": "6.0.100813",
            "allowedValues": [
                "6.0.0001674",
                "6.0.100813",
                "6.0.101000"
            ],
            "type": "string",
            "metadata": {
                "description": "F5 BIG-IQ version you want to use."
            }
        },
        "licenseKey2": {
            "minLength": 1,
            "maxLength": 255,
            "type": "string",
            "metadata": {
                "description": "F5 BIG-IQ DCD license key"
            }
        },
        "licensePoolKey": {
            "minLength": 1,
            "maxLength": 255,
            "type": "string",
            "metadata": {
                "description": "F5 BIG-IP license pool key"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
              "description": "Location for all resources."
            }
          },
        "restrictedSrcAddress": {
            "defaultValue": "*",
            "type": "string",
            "metadata": {
                "description": " The IP address range used to SSH and access managment GUI on the EC2 instances"
            }
        },
        "mgmtSubnetPrefix": {
            "defaultValue": "10.1.1.0/24",
            "minLength": 9,
            "maxLength": 18,
            "type": "string",
            "metadata": {
                "description": " The address range for the first subnet which is compatible with the Virtual Network,Must be a valid IP address range of the form x.x.x.x/x."
            }
        },
        "intSubnetPrefix": {
            "defaultValue": "10.1.2.0/24",
            "minLength": 9,
            "maxLength": 18,
            "type": "string",
            "metadata": {
                "description": " The address range for the second subnet which is compatible with the VPC CIDR block,Must be a valid IP address range of the form x.x.x.x/x."
            }
        },
        "vnetAddressPrefix": {
            "defaultValue": "10.1.0.0/16",
            "minLength": 9,
            "maxLength": 18,
            "type": "string",
            "metadata": {
                "description": " The vnet address block  , Must be a valid IP in range of the form x.x.x.x/x."
            }
        },
        "ssgName" : {
            "type":"string",
            "defaultValue": "azure-f5-ssg"
        },
        "dcdInstanceName": {
            "defaultValue": "demo-ssg-trial-dcd",
            "minLength": 1,
            "maxLength": 25,
            "type": "string",
            "metadata": {
                "description": "A unique CloudFormation StackName within your azure account, to be used to set DCD server instance."
            }
        },
        "cmInstanceName": {
            "defaultValue": "demo-ssg-trial-cm",
            "minLength": 1,
            "maxLength": 25,
            "type": "String",
            "metadata": {
                "description": "A unique CloudFormation StackName within your azure account, to be used to set CM server instance."
            }
        },
        "customImage": {
            "defaultValue": "OPTIONAL",
            "type": "string",
            "metadata": {
                "description": "If you would like to deploy using a local BIG-IP image, provide either the full URL to the VHD in Azure storage **or** the full resource ID to an existing Microsoft.Compute image resource.  **Note**: Unless specifically required, leave the default of **OPTIONAL**."
            }
        },
        "tagValues": {
            "defaultValue": {
                "application": "BIGIQ"
            },
            "type": "object",
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            }
        }
    },
    "variables": {
        "computeApiVersion": "2018-10-01",
        "networkApiVersion": "2018-08-01",
        "storageApiVersion": "2017-10-01",
        "location": "[parameters('location')]",
        "adminPasswordOrKey": "[replace(parameters('adminPasswordOrKey'),'\\n', '\n')]",
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "keyData": "[variables('adminPasswordOrKey')]",
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                    }
                ]
            }
        },
        "subscriptionID": "[subscription().subscriptionId]",
        "tenantID":"[subscription().tenantId]",
        "ssgName":"[parameters('ssgName')]",
        "resourceGroupName": "[resourceGroup().name]",
        "singleQuote": "'",
        "skuToUse": "f5-bigiq-virtual-edition-byol",
        "offerToUse": "f5-big-iq",
        "imagePlan": {
            "name": "[variables('skuToUse')]",
            "product": "[variables('offerToUse')]",
            "publisher": "f5-networks"
        },
        "imageReference": {
            "offer": "[variables('offerToUse')]",
            "publisher": "f5-networks",
            "sku": "[variables('skuToUse')]",
            "version": "[parameters('bigIqVersion')]"
        },
        "dcdInstanceName": "[toLower(parameters('dcdInstanceName'))]",
        "cmInstanceName": "[toLower(parameters('cmInstanceName'))]",
        "virtualNetworkName": "[concat('BIG-IQ-VNET-',variables('resourceGroupName'),'-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "vnetAddressPrefix": "[parameters('vnetAddressPrefix')]",
        "publicIPAddressType": "Static",
        "extPublicIPAddressName": "[concat('BIG-IQ-DCD-IP-' , variables('resourceGroupName'),'-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "dcdPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extPublicIPAddressName'))]",
        "mgmtNicName": "[concat('BIG-IQ-DCD-NetworkInterface-' , variables('resourceGroupName') ,'-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "mgmtNicID": "[resourceId('Microsoft.Network/NetworkInterfaces', variables('mgmtNicName'))]",
        "intNicName": "[concat('BIG-IQ-CM-NetworkInterface-' , variables('resourceGroupName'),'-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "mgmtSubnetName": "[concat( variables('resourceGroupName') , '-mgmtSubnet','-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "mgmtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('mgmtSubnetName'))]",
        "mgmtNsgName": "[concat('BIG-IQ-SG-', variables('resourceGroupName'),'-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "mgmtNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('mgmtNsgName'))]",
        "intSubnetName": "[concat( variables('resourceGroupName') , '-intSubnet','-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "intSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('intsubnetName'))]",
        "intpublicIPAddressName": "[concat('BIG-IQ-CM-IP-' , variables('resourceGroupName'),'-',uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name))]",
        "cmPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('intPublicIPAddressName'))]",
        "tagValues": "[parameters('tagValues')]",
        "newDataStorageAccountName": "[concat(uniquestring(variables('resourceGroupName'), resourceGroup().id, deployment().name), 'data000')]",
        "dataStorageAccountType": "Standard_LRS",
        "customImage": "[replace(parameters('customImage'), 'OPTIONAL', '')]",
        "useCustomImage": "[not(empty(variables('customImage')))]",
        "createNewCustomImage": "[contains(variables('customImage'), 'https://')]",
        "newCustomImageName": "[concat(variables('resourceGroupName'), '-image')]",
        "storageProfileArray": {
            "customImage": {
                "imageReference": {
                    "id": "[if(variables('createNewCustomImage'), resourceId('Microsoft.Compute/images', variables('newCustomImageName')), variables('customImage'))]"
                }
            },
            "platformImage": {
                "imageReference": "[variables('imageReference')]",
                "osDisk": {
                    "createOption": "FromImage"
                }
            }
        },
        "premiumInstanceArray": [
            "Standard_DS2",
            "Standard_DS3",
            "Standard_DS4",
            "Standard_DS11",
            "Standard_DS12",
            "Standard_DS13",
            "Standard_DS14",
            "Standard_DS2_v2",
            "Standard_DS3_v2",
            "Standard_DS4_v2",
            "Standard_DS5_v2",
            "Standard_DS11_v2",
            "Standard_DS12_v2",
            "Standard_DS13_v2",
            "Standard_DS14_v2",
            "Standard_DS15_v2",
            "Standard_F2S",
            "Standard_F4S",
            "Standard_F8S",
            "Standard_F16S",
            "Standard_GS2",
            "Standard_GS3",
            "Standard_GS4",
            "Standard_GS5"
        ],
        "dcdBackgroundConfig": "[concat('#!/usr/bin/env bash','\n','mkdir -p /config/cloud;','cd /config/cloud;','curl https://s3.amazonaws.com/big-iq-quickstart-cf-templates-aws/6.0.1.1/scripts.tar.gz > scripts.tar.gz ;','tar --strip-components=1 -xvzf scripts.tar.gz ;','\n','/config/cloud/wait-for-rjd.py;','BIG_IQ_PWD=$1;','tmsh modify auth user admin password $BIG_IQ_PWD && tmsh save sys config && set-basic-auth on;','/config/cloud/configure-bigiq.py --LICENSE_KEY ', parameters('licenseKey2'),' --MASTER_PASSPHRASE ValidPassphrase1234567812345678! --TIMEOUT_SEC 1200 --NODE_TYPE DCD;')]",
        "setupDcdBackgroundScript": "[concat(variables('singleQuote'), variables('dcdBackgroundConfig'), variables('singleQuote'))]",
        "setUpDcdScript": "IyEvdXNyL2Jpbi9lbnYgYmFzaApyZWFkIC1zIC1wICJCSUctSVEgUGFzc3dvcmQgW0FscGhhbnVtZXJpY3Mgb25seV06ICIgdjEgCmVjaG8gCnJlYWQgLXMgLXAgIlJlLWVudGVyIEJJRy1JUSBQYXNzd29yZCBbQWxwaGFudW1lcmljcyBvbmx5XTogIiBCSUdfSVFfUFdEIAp3aGlsZSBbICIkdjEiICE9ICIkQklHX0lRX1BXRCIgXTsgZG8gCiAgICBlY2hvIAogICAgZWNobyAiRW50cmllcyBkaWQgbm90IG1hdGNoLCB0cnkgYWdhaW4iIAogICAgZWNobyAKICAgIHJlYWQgLXMgLXAgIkJJRy1JUSBQYXNzd29yZCBbQWxwaGFudW1lcmljcyBvbmx5XTogIiB2MSAKICAgIGVjaG8gCiAgICByZWFkIC1zIC1wICJSZS1lbnRlciBCSUctSVEgUGFzc3dvcmQgW0FscGhhbnVtZXJpY3Mgb25seV06ICIgQklHX0lRX1BXRCAKZG9uZSAKZWNobwpub2h1cCAvY29uZmlnL2Nsb3VkL3NldHVwLWRjZC1iYWNrZ3JvdW5kLnNoICIkQklHX0lRX1BXRCIgJj4gL3Zhci9sb2cvc2V0dXAubG9nIDwgL2Rldi9udWxsICYKZWNobyAndGFpbCAtZiAvdmFyL2xvZy9zZXR1cC5sb2cgaW4gb3JkZXIgdG8gbW9uaXRvciBzZXR1cCBwcm9ncmVzcyc=",
        "setUpCmScript" : "IyEvdXNyL2Jpbi9lbnYgYmFzaApyZWFkIC1zIC1wICJBV1MgQWNjZXNzIEtleSBJRDogIiB2MSAKZWNobyAKcmVhZCAtcyAtcCAiUmUtZW50ZXIgQVdTIEFjY2VzcyBLZXkgSUQ6ICIgQVdTX0FDQ0VTU19LRVkgCndoaWxlIFsgIiR2MSIgIT0gIiRBV1NfQUNDRVNTX0tFWSIgXTsgZG8gCiAgICBlY2hvIAogICAgZWNobyAiRW50cmllcyBkaWQgbm90IG1hdGNoLCB0cnkgYWdhaW4iIAogICAgZWNobyAKICAgIHJlYWQgLXMgLXAgIkFXUyBBY2Nlc3MgS2V5IElEOiAiIHYxIAogICAgZWNobyAKICAgIHJlYWQgLXMgLXAgIlJlLWVudGVyIEFXUyBBY2Nlc3MgS2V5IElEOiAiIEFXU19BQ0NFU1NfS0VZIApkb25lIAplY2hvCnJlYWQgLXMgLXAgIkFXUyBTZWNyZXQgQWNjZXNzIEtleTogIiB2MSAKZWNobyAKcmVhZCAtcyAtcCAiUmUtZW50ZXIgQVdTIFNlY3JldCBBY2Nlc3MgS2V5OiAiIEFXU19TRUNSRVRfS0VZIAp3aGlsZSBbICIkdjEiICE9ICIkQVdTX1NFQ1JFVF9LRVkiIF07IGRvIAogICAgZWNobyAKICAgIGVjaG8gIkVudHJpZXMgZGlkIG5vdCBtYXRjaCwgdHJ5IGFnYWluIiAKICAgIGVjaG8gCiAgICByZWFkIC1zIC1wICJBV1MgU2VjcmV0IEFjY2VzcyBLZXk6ICIgdjEgCiAgICBlY2hvIAogICAgcmVhZCAtcyAtcCAiUmUtZW50ZXIgQVdTIFNlY3JldCBBY2Nlc3MgS2V5OiAiIEFXU19TRUNSRVRfS0VZIApkb25lIAplY2hvCnJlYWQgLXMgLXAgIkJJRy1JUSBQYXNzd29yZCBbQWxwaGFudW1lcmljcyBvbmx5XTogIiB2MSAKZWNobyAKcmVhZCAtcyAtcCAiUmUtZW50ZXIgQklHLUlRIFBhc3N3b3JkIFtBbHBoYW51bWVyaWNzIG9ubHldOiAiIEJJR19JUV9QV0QgCndoaWxlIFsgIiR2MSIgIT0gIiRCSUdfSVFfUFdEIiBdOyBkbyAKICAgIGVjaG8gCiAgICBlY2hvICJFbnRyaWVzIGRpZCBub3QgbWF0Y2gsIHRyeSBhZ2FpbiIgCiAgICBlY2hvIAogICAgcmVhZCAtcyAtcCAiQklHLUlRIFBhc3N3b3JkIFtBbHBoYW51bWVyaWNzIG9ubHldOiAiIHYxIAogICAgZWNobyAKICAgIHJlYWQgLXMgLXAgIlJlLWVudGVyIEJJRy1JUSBQYXNzd29yZCBbQWxwaGFudW1lcmljcyBvbmx5XTogIiBCSUdfSVFfUFdEIApkb25lIAplY2hvCnJlYWQgLXMgLXAgIkJJRy1JUCBQYXNzd29yZCBbQWxwaGFudW1lcmljcyBvbmx5XTogIiB2MSAKZWNobyAKcmVhZCAtcyAtcCAiUmUtZW50ZXIgQklHLUlQIFBhc3N3b3JkIFtBbHBoYW51bWVyaWNzIG9ubHldOiAiIEJJR19JUF9QV0QgCndoaWxlIFsgIiR2MSIgIT0gIiRCSUdfSVBfUFdEIiBdOyBkbyAKICAgIGVjaG8gCiAgICBlY2hvICJFbnRyaWVzIGRpZCBub3QgbWF0Y2gsIHRyeSBhZ2FpbiIgCiAgICBlY2hvIAogICAgcmVhZCAtcyAtcCAiQklHLUlQIFBhc3N3b3JkIFtBbHBoYW51bWVyaWNzIG9ubHldOiAiIHYxIAogICAgZWNobyAKICAgIHJlYWQgLXMgLXAgIlJlLWVudGVyIEJJRy1JUCBQYXNzd29yZCBbQWxwaGFudW1lcmljcyBvbmx5XTogIiBCSUdfSVBfUFdEIApkb25lIAplY2hvCm5vaHVwIC9jb25maWcvY2xvdWQvc2V0dXAtY20tYmFja2dyb3VuZC5zaCAiJEFXU19BQ0NFU1NfS0VZIiAiJEFXU19TRUNSRVRfS0VZIiAiJEJJR19JUV9QV0QiICIkQklHX0lQX1BXRCIgJj4gL3Zhci9sb2cvc2V0dXAubG9nIDwgL2Rldi9udWxsICYKZWNobyAndGFpbCAtZiAvdmFyL2xvZy9zZXR1cC5sb2cgaW4gb3JkZXIgdG8gbW9uaXRvciBzZXR1cCBwcm9ncmVzcycKZWNobztlY2hvICdNYWtlIHN1cmUgeW91IGZvbGxvdyBUZWFyZG93biBpbnN0cnVjdGlvbnMgZnJvbSB0aGUgR2l0SHViIHJlcG9zaXRvcnkgb25jZSB5b3UgYXJlIGRvbmUgd2l0aCB5b3VyIHRlc3RpbmcuJw=="
    },
    "resources": [
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('intpublicIPAddressName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('extPublicIPAddressName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('mgmtNsgName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "securityRules": [
                    {
                        "name": "ssh_allow_22",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22",
                            "direction": "Inbound",
                            "priority": 102,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "http_allow_80",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "80",
                            "direction": "Inbound",
                            "priority": 103,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "ssl_allow_443",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443",
                            "direction": "Inbound",
                            "priority": 104,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "custom_tcp",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "65356",
                            "direction": "Inbound",
                            "priority": 105,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('vnetAddressPrefix')]",
                            "sourcePortRange": "1"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('mgmtNicName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dcdInstanceName'), '-ipconfig1')]",
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[variables('dcdPublicIPAddressId')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgID')]"
                }
            },
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('dcdPublicIPAddressId')]",
                "[variables('mgmtNsgID')]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('intNicName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('cmInstanceName'), '-ipconfig2')]",
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[variables('cmPublicIPAddressId')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgID')]"
                }
            },
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('cmPublicIPAddressId')]",
                "[variables('mgmtNsgID')]"
            ]
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('mgmtSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('mgmtSubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mgmtNsgName'))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('intSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('intSubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mgmtNsgName'))]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('mgmtNsgName'))]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "[variables('dataStorageAccountType')]",
                "tier": "Standard"
            },
            "kind": "Storage",
            "name": "[variables('newDataStorageAccountName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "supportsHttpsTrafficOnly": true
            }
        },
        {
            "type": "Microsoft.Compute/images",
            "name": "[variables('newCustomImageName')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "storageProfile": {
                    "osDisk": {
                        "blobUri": "[variables('customImage')]",
                        "osState": "Generalized",
                        "osType": "Linux",
                        "storageAccountType": "[if(contains(variables('premiumInstanceArray'), parameters('instanceType')), 'Premium_LRS', 'Standard_LRS')]"
                    }
                }
            },
            "condition": "[and(variables('useCustomImage'), variables('createNewCustomImage'))]"
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('dcdInstanceName')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('mgmtNicName'))]",
                            "properties": {
                                "primary": true
                            }
                        }
                    ]
                },
                "osProfile": {
                    "adminPassword": "[variables('adminPasswordOrKey')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "computerName": "[variables('dcdInstanceName')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                },
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[variables('newCustomImageName')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('cmInstanceName')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('intNicName'))]",
                            "properties": {
                                "primary": true
                            }
                        }
                    ]
                },
                "osProfile": {
                    "adminPassword": "[variables('adminPasswordOrKey')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "computerName": "[variables('cmInstanceName')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                },
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[variables('newCustomImageName')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'))]"
            ]
        },
        {
            "apiVersion": "2018-05-01",
            "name": "linkedTemplate",
            "type": "Microsoft.Resources/deployments",
            "properties": {
              "mode": "Incremental",
              "templateLink": {
                 "uri":"https://s3.amazonaws.com/azuretemplates/ubuntu-azure-trail-deploy.json"
              },
              "parameters": {
                 "location":{
                    "value": "[variables('location')]"
                  },
                  "authenticationType":{
                    "value": "[parameters('authenticationType')]"
                  },
                  "adminPasswordOrKey":{
                    "value": "[variables('adminPasswordOrKey')]"
                  },
                  "vnetName":{
                     "value":"[variables('virtualNetworkName')]"   
                  },
                  "subnet":{
                    "value": "[variables('mgmtSubnetName')]"
                  },
                  "loadBalancerDnsName":{
                    "value": "ip10-ec2internal"
                  }
              }
            }
         },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('dcdInstanceName'),'/dcdStartupScript')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "protectedSettings": {
                    "commandToExecute": "[concat('mkdir -p /config/cloud ;cd /config/cloud ;curl https://s3.amazonaws.com/big-iq-quickstart-cf-templates-aws/6.0.1.1/scripts.tar.gz > scripts.tar.gz;tar --strip-components=1 -xvzf scripts.tar.gz ;','echo ', variables('setUpDcdBackgroundScript'), ' > /config/cloud/setup-dcd-background.sh; chmod +x /config/cloud/setup-dcd-background.sh;','echo ', variables('setUpDcdScript'), ' | /usr/bin/base64 -d > /config/cloud/setup-dcd.sh; chmod +x /config/cloud/setup-dcd.sh;')]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {
                    "fileUris": []
                },
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dcdInstanceName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('cmInstanceName'),'/cmStartupScript')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "properties": {
                "protectedSettings": {
                    "commandToExecute": "[concat('mkdir -p /config/cloud ;cd /config/cloud ;curl https://s3.amazonaws.com/big-iq-quickstart-cf-templates-aws/6.0.1.1/scripts.tar.gz > scripts.tar.gz;tar --strip-components=1 -xvzf scripts.tar.gz ;','echo ' ,variables('singleQuote') , concat('#!/usr/bin/env bash','\n','mount -o remount,rw /usr','\n','mkdir -p /config/cloud\n','cd /config/cloud \n','curl https://s3.amazonaws.com/big-iq-quickstart-cf-templates-aws/6.0.1.1/scripts.tar.gz > scripts.tar.gz \n','tar --strip-components=1 -xvzf scripts.tar.gz \n','BIG_IQ_PWD=\"$1\"','\n','BIG_IP_PWD=\"$2\"','\n','/config/cloud/configure-bigiq.py --LICENSE_KEY ', parameters('licenseKey1'),' --MASTER_PASSPHRASE ValidPassphrase1234567812345678! --TIMEOUT_SEC 1200 \n','sleep 10\n','/config/cloud/add-dcd.py --DCD_IP_ADDRESS ',reference(variables('mgmtNicID')).ipConfigurations[0].properties.privateIPAddress,' --DCD_PWD \"$BIG_IQ_PWD\" --DCD_USERNAME admin \n','tmsh modify auth user admin password \"$BIG_IQ_PWD\" && tmsh save sys config','/config/cloud/activate-dcd-services.py --SERVICES asm --DCD_IP_ADDRESS ',reference(variables('mgmtNicID')).ipConfigurations[0].properties.privateIPAddress,'\n','set-basic-auth on \n','/config/cloud/create-license-pool.py --REG_KEY ',parameters('licensePoolKey'),' --BIG_IQ_PWD \"$BIG_IQ_PWD\" \n','set-basic-auth off \n','/config/cloud/create-auto-scaling.py --RESOURCE ', variables('resourceGroupName') ,' --DEFAULT_LOCATION ',variables('location'),' --VNET1 ',variables('virtualNetworkName'),' --SUBNET1 ',variables('mgmtSubnetName'),' --BYOL_BIGIP_NAME invalid',' --BYOL_BIGIP_VERSION invalid',' --SUBSCRIPTION_ID ',variables('subscriptionID'),' --SERVICE_PRINCIPAL_SECRET invalid',' --TENANT_ID ',variables('tenantID'),' --CLIENT_ID invalid',' --BIGIQ_URI http://localhost:8100',' --BIGIP_USER admin',' --BIGIP_PWD \"$BIG_IP_PWD\"',' --CLOUD_PROVIDER_NAME azure',' --CLOUD_ENVIRONMENT_NAME azure-env ',' --DEVICE_TEMPLATE_NAME default-ssg-template ',' --LOOKUP_SERVER_LIST 8.8.8.8',' --NTP_SERVER 0.pool.ntp.org',' --SSG_NAME ',variables('ssgName'),' --CM_IP ',reference(variables('cmPublicIPAddressId')).ipAddress,' --BIG_IQ_PWD \"$BIG_IQ_PWD\"','\n','/config/cloud/deploy-application.py --NODE_IP ',reference('linkedTemplate').outputs.hostname.value, ''), variables('singleQuote'), ' > /config/cloud/setup-cm-background.sh;','echo ', variables('setUpCmScript'), ' | /usr/bin/base64 -d > /config/cloud/setup-cm.sh; chmod +x /config/cloud/setup-cm.sh;')]"
                },
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {
                    "fileUris": []
                },
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('cmInstanceName'))]"
            ]
        }
    ],
    "outputs": {
        "BIGIQ-DCD-GUI-URL": {
            "type": "string",
            "value": "[concat('https://', reference(variables('dcdPublicIPAddressId')).ipAddress, ':', 443)]"
        },
        "BIGIQ-DCD-sshCommand": {
            "type": "string",
            "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('dcdPublicIPAddressId')).ipAddress)]"
          },
          "BIGIQ-CM-GUI-URL": {
            "type": "string",
            "value": "[concat('https://', reference(variables('cmPublicIPAddressId')).ipAddress, ':', 443)]"
        },
        "BIGIQ-CM-sshCommand": {
            "type": "string",
            "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('cmPublicIPAddressId')).ipAddress)]"
          }
    }
}